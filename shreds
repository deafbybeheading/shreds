#!/bin/bash

#set -x
set -e

VERSION=0.2

E_RIP_CHECKSUM_MISMATCH=13
E_CDDB_READ_FAILED=14

DEFAULTS=$(cat <<'EOF'
# for editing cddb metadata before encoding
EDITOR="${EDITOR:-emacs}"

# for temporary wave files when ripping; cleaned up in normal operation
WORKDIR='/tmp'
# for CDDB metadata (files here are cached indefinitely, but can be safely deleted)
CDDBDIR=$HOME/.shreds/cddb

CDROM='/dev/cdrom'
# CD drive offset; see http://www.accuraterip.com/driveoffsets.htm
# TODO: make this automagic
OFFSET=0

# Number of times to rip (and confirm checksums of) each track
RIP_ATTEMPTS=2

# Where final encoded (e.g., MP3) files are places
ENCODED_ROOT="${1:-$HOME/Music}"
# Options passed to encoder
ENCODE_OPTS="-V 2 --id3v2-only"

EOF
)

if [ ! -f ~/.shreds/config ];
then
    mkdir -p ~/.shreds
    echo "$DEFAULTS" > ~/.shreds/config
fi

source ~/.shreds/config

test -d "$WORKDIR" || mkdir -p "$WORKDIR"
test -d "$CDDBDIR" || mkdir -p "$CDDBDIR"

# for multi-disc albums ripped to a series of contiguous tracks
# we may want this in the disc metadata file eventually
TRACK_OFFSET=0
while getopts "o" opt
do
    case "$opt" in
	o)TRACK_OFFSET="$OPTARG";;
    esac
done
shift $((OPTIND-1))


DISC_INFO=`cd-discid $CDROM`
DISC_ID=`echo $DISC_INFO | cut -d\  -f1`

# CDDB protocol used as documented here: http://ftp.freedb.org/pub/freedb/misc/freedb_CDDB_protcoldoc.zip and
# here http://ftp.freedb.org/pub/freedb/latest/DBFORMAT
CDDB_VER=6
CDDB_URL="http://freedb.freedb.org/~cddb/cddb.cgi"
CDDB_USER=`whoami`
CDDB_HOST=`hostname`

# Issue a remote CDDB command (if not cached); arguments are the command in question and its arguments (as a single parameter)
cddb() {
    FILENAME="`cddb_file "$1" "$2"`"
    CDDB_REQUEST="${CDDB_URL}?cmd=cddb+${1}+${2}&hello=${CDDB_USER}+${CDDB_HOST}+$(basename $0)+${VERSION}&proto=${CDDB_VER}"
    echo CDDB request: $CDDB_REQUEST
    # see if we have this request cached already
    # TODO: expire cache entries
    test -f "$FILENAME" || wget -O "$FILENAME" "$CDDB_REQUEST"
}

cddb_file() {
    echo "$CDDBDIR/$2.${1}"
}

sanitize() {
    # Get rid of characters we don't want in file names
    echo "$1" | tr ':*?!<>/|\"' '_'
}

cddb query "$DISC_INFO"
CDDB_LISTING="`cddb_file query \"$DISC_INFO\"`"
CDDB_STATUS=$(head -c3 "$CDDB_LISTING")
SELECTED_DISC=
echo "cddb query status is $CDDB_STATUS"
if [ "$CDDB_STATUS" -eq 210 -o "$CDDB_STATUS" -eq 211 ];
then
    # multiple results (exact or inexact)
    let i=1
    echo "Select disc metadata:"
    tail -n +2 "$CDDB_LISTING" | head -n -1 | awk '{print FNR "\t" $0}'
    read SELECTED_INDEX
    SELECTED_DISC="`tail -n +$((SELECTED_INDEX+1)) "$CDDB_LISTING" | head -1 | cut -d\  -f 1,2`"
elif [ "$CDDB_STATUS" -eq 200 ];
then
    # single result
    SELECTED_DISC="`cut -d\  -f2,3 \"$CDDB_LISTING\"`"
elif [ "$CDDB_STATUS" -eq 202 ];
then
    : # no results found
else
    # errors
    echo "ERROR: Unrecognized status."
    exit $CDDB_STATUS
fi

if [ -n "$SELECTED_DISC" ];
then
    cddb read "$SELECTED_DISC"
    CDDB_METADATA="`cddb_file read \"$SELECTED_DISC\"`"
    CDDB_STATUS="$(head -c3 "$CDDB_METADATA")"
    if [ ! "$CDDB_STATUS" -eq 210 ];
    then
	echo "Could not read $SELECTED_DISC metadata from CDDB"
	exit $E_CDDB_READ_FAILED
    fi
    # this is the nicely formatted metadata file we will be dealing with
    METADATA_FILE="${CDDB_METADATA}-formatted"
else
    METADATA_FILE="`cddb_file read \"${DISC_ID}\"`-formatted"
    TRACK_COUNT=`echo $DISC_INFO | cut -d\  -f2`
    # Write a dummy metadata file
    for i in `seq $((1+$TRACK_OFFSET)) $(($TRACK_COUNT+$TRACK_OFFSET))`;
    do
	echo -e "album_artist\talbum_title\tyear\tgenre\t$i\ttrack_artist\ttrack_title" >> "$METADATA_FILE"	
    done
fi

# Generate a file with
#   album artist / album title / year / genre / track no. / artist / title
# for each track. The user can edit this pre-encoding to adjust CDDB results.

if [ ! -f "$METADATA_FILE" ];
then
    DTITLE="$(sed -r -n 's_^DTITLE=(.*)$_\1_p' "$CDDB_METADATA" | tr -d '\r')"
    # Bash string mangling: this strips the longest trailing match
    # and shortest leading match (since cut can't handle a multi-char delimiter)
    ALBUM_ARTIST="${DTITLE%% / *}"
    ALBUM_TITLE="${DTITLE#* / }"
    YEAR="$(sed -r -n 's_^DYEAR=(.*)_\1_p' "$CDDB_METADATA" | tr -d '\r')"
    GENRE="$(sed -r -n 's_^DGENRE=(.*)_\1_p' "$CDDB_METADATA" | tr -d '\r')"

    # This is simplistic. We could be dealing with a split single, a
    # soundtrack, or something else that has more than one artist. We may
    # want something better.
    if $(echo "$ALBUM_ARTIST" | grep -i '^Various' &>/dev/null);
    then 
	IS_VA=true
    fi

    let i=$TRACK_OFFSET+1
    grep "^TTITLE" "$CDDB_METADATA" | while read track;
    do
	TRACK_NO=$i
	TRACK_INFO="$(echo $track | sed -r -n 's_^TTITLE[0-9]{1,3}=(.*)$_\1_p' | tr -d '\r')"
	if test -n "$IS_VA";
	then
	    TRACK_ARTIST="${TRACK_INFO%% / *}"
	    TRACK_TITLE="${TRACK_INFO#* / }"
	else
	    TRACK_ARTIST="$ALBUM_ARTIST"
	    TRACK_TITLE="$TRACK_INFO"
	fi

        # If you have embedded tabs in your music metadata, FSM help you
	echo -e "${ALBUM_ARTIST}\t${ALBUM_TITLE}\t${YEAR}\t${GENRE}\t${TRACK_NO}\t${TRACK_ARTIST}\t${TRACK_TITLE}" >> "$METADATA_FILE"
	let i+=1
    done
fi
$EDITOR "$METADATA_FILE"
if [ $(cut -d$'\011' -f1 "$METADATA_FILE" | uniq | wc -l) -gt 1 ];
then
    IS_VA=true
else
    IS_VA=""
fi

# TODO: offer a way to abort here

while IFS=$'\011' read alb_artist alb_title year genre track_no artist title
do
    LAST_CHECKSUM=
    WAV_FILE=
    for attempt in `seq $RIP_ATTEMPTS`;
    do
	rm -f "$WAV_FILE"
	WAV_FILE=`mktemp "$WORKDIR/track_${track_no}.wav.${attempt}.XXXXX"`
	cdparanoia $track_no -d "$CDROM" -O $OFFSET "$WAV_FILE"
	CURR_CHECKSUM=`md5sum $WAV_FILE | cut -d\  -f1`
	if [ -n "$LAST_CHECKSUM" -a "$LAST_CHECKSUM" != "$CURR_CHECKSUM" ];
	then
	    echo "Error ripping track ${track_no}; checksum mismatch: $LAST_CHECKSUM $CURR_CHECKSUM"
	    # TODO: auto-retry, as these are sometimes transient
	    exit $E_RIP_CHECKSUM_MISMATCH
	fi
	LAST_CHECKSUM=$CURR_CHECKSUM
    done

    # N.B.: Technically, it's possible that the album artist and album
    # title are different from track to track. I can't imagine why that
    # would be a good idea, but it's actually easier to support this than
    # to block it
    safe_alb_artist="`sanitize "$alb_artist"`"
    safe_alb_title="`sanitize "$alb_title"`"
    safe_title="`sanitize "$title"`"
    ENCODED_DIR="${ENCODED_ROOT}/${safe_alb_artist}/${safe_alb_title}"
    mkdir -p "$ENCODED_DIR"

    LAME_OPTS="$ENCODE_OPTS --tv TXXX=DISCID=$DISC_ID"
    if test -n "$IS_VA";
    then
	LAME_OPTS="$LAME_OPTS --tv \"ALBUM ARTIST\"=\"$alb_artist\""
    fi

    lame "$LAME_OPTS" --tl "$alb_title" --ty "$year" --tg "$genre" --ta "$artist" --tt "$title" --tn "$track_no" "$WAV_FILE" "$ENCODED_DIR/$(printf "%02d" $track_no)-${safe_title}.mp3"
    rm -f "$WAV_FILE"
done < "$METADATA_FILE"

# TODO: cleanup metadata eventually